Resources:
  #
  # Section: Network
  #
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./network.yaml
  #
  # End of Section: Network
  #

  #
  # Section: Base infra
  #
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ALB
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !GetAtt NetworkStack.Outputs.VpcId

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !GetAtt NetworkStack.Outputs.PublicSubnetAId
        - !GetAtt NetworkStack.Outputs.PublicSubnetBId
      Type: application

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !GetAtt NetworkStack.Outputs.VpcId

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  #
  # End of Section: Base infra
  #

Outputs:
  AppUrl:
    Description: The URL to the Application Load Balancer fronting the cluster.
    Value: !Join ['', ['http://', !GetAtt ALB.DNSName]]
